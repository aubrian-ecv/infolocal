generator Client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Session {
  id           String   @id @default(nanoid(11))
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // For the Credentials provider
  passwordHash String?

  sessions  Session[]
  roles     Role[]
  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
  hubs      Hub[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Article {
  id              Int      @id @default(autoincrement())
  title           String
  content         String
  publicationDate DateTime
  imageUrl        String
  imageCaption    String
  keywords        String

  author    String
  likes     Like[]
  comments  Comment[]
  shares    Share[]
  bookmarks Bookmark[]
}

model Like {
  id Int @id @default(autoincrement())

  ArticleId Int?
  article   Article? @relation(fields: [ArticleId], references: [id])

  HubId Int?
  hub   Hub? @relation(fields: [HubId], references: [id])

  UserId Int
  user   User @relation(fields: [UserId], references: [id])

  @@unique([ArticleId, UserId])
  @@unique([HubId, UserId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  ArticleId Int
  article   Article  @relation(fields: [ArticleId], references: [id])
  UserId    Int
  user      User     @relation(fields: [UserId], references: [id])
}

model Share {
  id        Int     @id @default(autoincrement())
  ArticleId Int
  article   Article @relation(fields: [ArticleId], references: [id])
}

model Bookmark {
  ArticleId Int
  article   Article @relation(fields: [ArticleId], references: [id])
  UserId    Int
  user      User    @relation(fields: [UserId], references: [id])

  @@id([ArticleId, UserId])
}

model Survey {
  id        Int             @id @default(autoincrement())
  question  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
  published Boolean         @default(false)
  options   SurveyOptions[]
  results   SurveyResults[]
}

model SurveyOptions {
  id       Int             @id @default(autoincrement())
  label    String
  SurveyId Int
  survey   Survey          @relation(fields: [SurveyId], references: [id])
  results  SurveyResults[]
}

model SurveyResults {
  id       Int           @id @default(autoincrement())
  SurveyId Int
  survey   Survey        @relation(fields: [SurveyId], references: [id])
  optionId Int
  option   SurveyOptions @relation(fields: [optionId], references: [id])
}

model Hub {
  id       Int    @id @default(autoincrement())
  name     String
  keywords String

  users User[]
  likes Like[]
}
